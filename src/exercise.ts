import axios from 'axios';
import { Web3Wrapper, TxData, SupportedProvider } from "@0x/web3-wrapper";
import { GetSwapQuoteResponse, ZeroExSwapAPIParams, ERC20TokenContract, EIGHT_GWEI_IN_WEI } from "./misc";
import { getContractAddressesForChainOrThrow, ChainId } from "@0x/contract-addresses";
import { BigNumber } from '@0x/utils';
import { Web3ProviderEngine } from '@0x/subproviders';

/**
 * Returns the ERC20 token balance of an address
 * @param token ERC20Token object
 * @param address the address from which the balance will be retrieved
 */
async function getBalanceInEthereum(tokenAddress: string, owner: string, provider: SupportedProvider): Promise<BigNumber> {
    const contractWrapper = new ERC20TokenContract(tokenAddress, provider);
    return contractWrapper.balanceOf(owner).callAsync();
}

/**
 * Converts a humanly-readable number (that may contain decimals, example: 133.232) into a big integer.
 * Why do we need this: Ethereum can only only store integer values, so, in order to generate a number
 * that can be diplayed to users (in a UI), you need to store that number as a big integer + the number of
 * decimal places.
 * 
 * Example:
 * (USDC has 6 decimals, DAI has 18 decimals)
 * 
 * - convertValueFromHumanToEthereum(usdcToken, 5, provider) returns 5000000
 * - convertValueFromHumanToEthereum(daiToken, 20.5, provider) returns 20500000000000000000
 * 
 * @param token ERC20Token object
 * @param unitAmount a number representing the human-readable number
 * @returns a big integer that can be used to interact with Ethereum
 */
async function convertValueFromHumanToEthereum(tokenAddress: string, unitAmount: number, provider: SupportedProvider): Promise<BigNumber> {
    const contractWrapper = new ERC20TokenContract(tokenAddress, provider);
    const decimals = await contractWrapper.decimals().callAsync();
    return Web3Wrapper.toBaseUnitAmount(unitAmount, decimals.toNumber());
}

/**
 * Performs a trade by requesting a quote from the 0x API, and filling that quote on the blockchain
 * @param buyToken the token address to buy
 * @param sellToken the token address to sell
 * @param amountToSell the token amount to sell
 * @param fromAddress the address that will perform the transaction
 * @param client the Web3Wrapper client
 */
export async function performSwapAsync(
    buyTokenAddress: string,
    sellTokenAddress: string,
    amountToSell: number,
    fromAddress: string,
    provider: SupportedProvider,
): Promise<void> {
    
    // ⚠️ For the sake of time, we won't check to ensure that the user has enough ERC20 token balances, or that the user has properly allowed
    // the 0x smart contracts to trade on their behalf (allowance).
    // TODO: Check balances
    // TODO: Check allowances

    // Convert `amountToSell` from unit amount (ex. 121.33) to base unit amount (ex. 121330000).
    // Only whole numbers can be used in Solidity. To work around this, every ERC20 token specifies a
    // 'decimals' field which is used to specify how many decimal places a token has.
    // DAI -> 18 decimals
    // USDC -> 6 decimals
    const amountToSellInEthereum = await convertValueFromHumanToEthereum(sellTokenAddress, amountToSell, provider);

    //  Make a request to the 0x API swap endpoint: https://0x.org/docs/guides/swap-tokens-with-0x-api#swap-eth-for-1-dai
    // You can use the line below as guidance. In the example, the variable TxData contains the deserialized JSON response from the API.
    const url = `https://kovan.api.0x.org/swap/v0/quote`;
    const params: ZeroExSwapAPIParams = {
        buyToken: buyTokenAddress,
        sellToken: sellTokenAddress,
        sellAmount: amountToSellInEthereum.toString(),
        takerAddress: fromAddress,
    }
    const httpResponse = await axios.get<GetSwapQuoteResponse>(url, { params })
    const jsonResponse = httpResponse.data;
    const txData: TxData = {
        from: jsonResponse.from,
        to: jsonResponse.to,
        gas: jsonResponse.gas,
        gasPrice: jsonResponse.gasPrice,
        value: jsonResponse.value,
        data: jsonResponse.data,
    };
    console.log(`Ethereum transaction generated by the 0x API: 👇`);
    console.log(txData);

    // Final Step: You can `client.sendTransactionAsync()` to send a Ethereum transaction.
    const client = new Web3Wrapper(provider);
    await client.sendTransactionAsync(txData);
}